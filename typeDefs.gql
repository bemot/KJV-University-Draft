type User {
	_id: ID
	username: String!
	email: String!
	password: String!
	avatar: String
	bookedmarked: [BookmarkedVerse]
	favorites: [BookmarkedVerse]
	joinDate: String!
	updatedAt: String!
}

type BookmarkedVerse {
	_id: ID
	verse: Verse
	comment: String
	color: String
	dark: Boolean
	favorite: Boolean
	createdAt: String!
	updatedAt: String!
}

type Token {
	token: String!
}

type Verse {
	_id: ID
	bookName: String!
	chapterNumber: Int!
	verseNumber: Int!
	verseText: String!
	wordCount: Int
	letterCount: Int
	characterCount: Int
	createdAt: String!
	updatedAt: String!
}

type Chapter {
	_id: ID
	bookName: String!
	chapterNumber: Int!
	verses: [Verse!]!
	totalVerseCount: Int
	totalWordCount: Int
	totalLetterCount: Int
	totalCharacterCount: Int
	createdAt: String!
	updatedAt: String!
}

type Book {
	_id: ID
	bookTitle: String!
	bookTitle2: String
	bookName: String!
	bookNumber: Int!
	chapters: [Chapter!]!
	chapterCount: Int!
	totalBookVerses: Int
	totalBookWords: Int
	totalBookLetters: Int
	totalBookCharacters: Int
	createdAt: String!
	updatedAt: String!
}

type Query {
	getBooks: [Book]
	getOneBook(name: String!): Book
	getUser(id: String!): User
}

type Mutation {
	signUpUser(username: String!, email: String!, password: String!): Token
	signInUser(username: String!, password: String!): Token
}
